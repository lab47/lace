// Generated by gen_types. Don't modify manually!

package core

import (
	"fmt"
	"io"
)

func AssertComparable(env *Env, obj Object, msg string) Comparable {
	switch c := obj.(type) {
	case Comparable:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Comparable", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureComparable(env *Env, args []Object, index int) Comparable {
	switch c := args[index].(type) {
	case Comparable:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Comparable"))
	}
}

func AssertVector(env *Env, obj Object, msg string) *Vector {
	switch c := obj.(type) {
	case *Vector:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Vector", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureVector(env *Env, args []Object, index int) *Vector {
	switch c := args[index].(type) {
	case *Vector:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Vector"))
	}
}

func AssertChar(env *Env, obj Object, msg string) Char {
	switch c := obj.(type) {
	case Char:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Char", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureChar(env *Env, args []Object, index int) Char {
	switch c := args[index].(type) {
	case Char:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Char"))
	}
}

func AssertString(env *Env, obj Object, msg string) String {
	switch c := obj.(type) {
	case String:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "String", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureString(env *Env, args []Object, index int) String {
	switch c := args[index].(type) {
	case String:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "String"))
	}
}

func AssertSymbol(env *Env, obj Object, msg string) Symbol {
	switch c := obj.(type) {
	case Symbol:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Symbol", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureSymbol(env *Env, args []Object, index int) Symbol {
	switch c := args[index].(type) {
	case Symbol:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Symbol"))
	}
}

func AssertKeyword(env *Env, obj Object, msg string) Keyword {
	switch c := obj.(type) {
	case Keyword:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Keyword", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureKeyword(env *Env, args []Object, index int) Keyword {
	switch c := args[index].(type) {
	case Keyword:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Keyword"))
	}
}

func AssertRegex(env *Env, obj Object, msg string) *Regex {
	switch c := obj.(type) {
	case *Regex:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Regex", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureRegex(env *Env, args []Object, index int) *Regex {
	switch c := args[index].(type) {
	case *Regex:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Regex"))
	}
}

func AssertBoolean(env *Env, obj Object, msg string) Boolean {
	switch c := obj.(type) {
	case Boolean:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Boolean", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureBoolean(env *Env, args []Object, index int) Boolean {
	switch c := args[index].(type) {
	case Boolean:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Boolean"))
	}
}

func AssertTime(env *Env, obj Object, msg string) Time {
	switch c := obj.(type) {
	case Time:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Time", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureTime(env *Env, args []Object, index int) Time {
	switch c := args[index].(type) {
	case Time:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Time"))
	}
}

func AssertNumber(env *Env, obj Object, msg string) Number {
	switch c := obj.(type) {
	case Number:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Number", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureNumber(env *Env, args []Object, index int) Number {
	switch c := args[index].(type) {
	case Number:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Number"))
	}
}

func AssertSeqable(env *Env, obj Object, msg string) Seqable {
	switch c := obj.(type) {
	case Seqable:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Seqable", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureSeqable(env *Env, args []Object, index int) Seqable {
	switch c := args[index].(type) {
	case Seqable:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Seqable"))
	}
}

func AssertCallable(env *Env, obj Object, msg string) Callable {
	switch c := obj.(type) {
	case Callable:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Callable", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureCallable(env *Env, args []Object, index int) Callable {
	switch c := args[index].(type) {
	case Callable:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Callable"))
	}
}

func AssertType(env *Env, obj Object, msg string) *Type {
	switch c := obj.(type) {
	case *Type:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Type", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureType(env *Env, args []Object, index int) *Type {
	switch c := args[index].(type) {
	case *Type:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Type"))
	}
}

func AssertMeta(env *Env, obj Object, msg string) Meta {
	switch c := obj.(type) {
	case Meta:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Meta", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureMeta(env *Env, args []Object, index int) Meta {
	switch c := args[index].(type) {
	case Meta:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Meta"))
	}
}

func AssertInt(env *Env, obj Object, msg string) Int {
	switch c := obj.(type) {
	case Int:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Int", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureInt(env *Env, args []Object, index int) Int {
	switch c := args[index].(type) {
	case Int:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Int"))
	}
}

func AssertDouble(env *Env, obj Object, msg string) Double {
	switch c := obj.(type) {
	case Double:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Double", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureDouble(env *Env, args []Object, index int) Double {
	switch c := args[index].(type) {
	case Double:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Double"))
	}
}

func AssertStack(env *Env, obj Object, msg string) Stack {
	switch c := obj.(type) {
	case Stack:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Stack", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureStack(env *Env, args []Object, index int) Stack {
	switch c := args[index].(type) {
	case Stack:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Stack"))
	}
}

func AssertMap(env *Env, obj Object, msg string) Map {
	switch c := obj.(type) {
	case Map:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Map", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureMap(env *Env, args []Object, index int) Map {
	switch c := args[index].(type) {
	case Map:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Map"))
	}
}

func AssertSet(env *Env, obj Object, msg string) Set {
	switch c := obj.(type) {
	case Set:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Set", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureSet(env *Env, args []Object, index int) Set {
	switch c := args[index].(type) {
	case Set:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Set"))
	}
}

func AssertAssociative(env *Env, obj Object, msg string) Associative {
	switch c := obj.(type) {
	case Associative:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Associative", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureAssociative(env *Env, args []Object, index int) Associative {
	switch c := args[index].(type) {
	case Associative:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Associative"))
	}
}

func AssertReversible(env *Env, obj Object, msg string) Reversible {
	switch c := obj.(type) {
	case Reversible:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Reversible", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureReversible(env *Env, args []Object, index int) Reversible {
	switch c := args[index].(type) {
	case Reversible:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Reversible"))
	}
}

func AssertNamed(env *Env, obj Object, msg string) Named {
	switch c := obj.(type) {
	case Named:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Named", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureNamed(env *Env, args []Object, index int) Named {
	switch c := args[index].(type) {
	case Named:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Named"))
	}
}

func AssertComparator(env *Env, obj Object, msg string) Comparator {
	switch c := obj.(type) {
	case Comparator:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Comparator", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureComparator(env *Env, args []Object, index int) Comparator {
	switch c := args[index].(type) {
	case Comparator:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Comparator"))
	}
}

func AssertRatio(env *Env, obj Object, msg string) *Ratio {
	switch c := obj.(type) {
	case *Ratio:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Ratio", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureRatio(env *Env, args []Object, index int) *Ratio {
	switch c := args[index].(type) {
	case *Ratio:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Ratio"))
	}
}

func AssertNamespace(env *Env, obj Object, msg string) *Namespace {
	switch c := obj.(type) {
	case *Namespace:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Namespace", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureNamespace(env *Env, args []Object, index int) *Namespace {
	switch c := args[index].(type) {
	case *Namespace:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Namespace"))
	}
}

func AssertVar(env *Env, obj Object, msg string) *Var {
	switch c := obj.(type) {
	case *Var:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Var", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureVar(env *Env, args []Object, index int) *Var {
	switch c := args[index].(type) {
	case *Var:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Var"))
	}
}

func AssertError(env *Env, obj Object, msg string) Error {
	switch c := obj.(type) {
	case Error:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Error", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureError(env *Env, args []Object, index int) Error {
	switch c := args[index].(type) {
	case Error:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Error"))
	}
}

func AssertFn(env *Env, obj Object, msg string) *Fn {
	switch c := obj.(type) {
	case *Fn:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Fn", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureFn(env *Env, args []Object, index int) *Fn {
	switch c := args[index].(type) {
	case *Fn:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Fn"))
	}
}

func AssertDeref(env *Env, obj Object, msg string) Deref {
	switch c := obj.(type) {
	case Deref:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Deref", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureDeref(env *Env, args []Object, index int) Deref {
	switch c := args[index].(type) {
	case Deref:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Deref"))
	}
}

func AssertAtom(env *Env, obj Object, msg string) *Atom {
	switch c := obj.(type) {
	case *Atom:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Atom", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureAtom(env *Env, args []Object, index int) *Atom {
	switch c := args[index].(type) {
	case *Atom:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Atom"))
	}
}

func AssertRef(env *Env, obj Object, msg string) Ref {
	switch c := obj.(type) {
	case Ref:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Ref", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureRef(env *Env, args []Object, index int) Ref {
	switch c := args[index].(type) {
	case Ref:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Ref"))
	}
}

func AssertKVReduce(env *Env, obj Object, msg string) KVReduce {
	switch c := obj.(type) {
	case KVReduce:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "KVReduce", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureKVReduce(env *Env, args []Object, index int) KVReduce {
	switch c := args[index].(type) {
	case KVReduce:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "KVReduce"))
	}
}

func AssertPending(env *Env, obj Object, msg string) Pending {
	switch c := obj.(type) {
	case Pending:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Pending", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsurePending(env *Env, args []Object, index int) Pending {
	switch c := args[index].(type) {
	case Pending:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Pending"))
	}
}

func AssertFile(env *Env, obj Object, msg string) *File {
	switch c := obj.(type) {
	case *File:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "File", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureFile(env *Env, args []Object, index int) *File {
	switch c := args[index].(type) {
	case *File:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "File"))
	}
}

func Assertio_Reader(env *Env, obj Object, msg string) io.Reader {
	switch c := obj.(type) {
	case io.Reader:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "io.Reader", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func Ensureio_Reader(env *Env, args []Object, index int) io.Reader {
	switch c := args[index].(type) {
	case io.Reader:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "io.Reader"))
	}
}

func Assertio_Writer(env *Env, obj Object, msg string) io.Writer {
	switch c := obj.(type) {
	case io.Writer:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "io.Writer", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func Ensureio_Writer(env *Env, args []Object, index int) io.Writer {
	switch c := args[index].(type) {
	case io.Writer:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "io.Writer"))
	}
}

func AssertStringReader(env *Env, obj Object, msg string) StringReader {
	switch c := obj.(type) {
	case StringReader:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "StringReader", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureStringReader(env *Env, args []Object, index int) StringReader {
	switch c := args[index].(type) {
	case StringReader:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "StringReader"))
	}
}

func Assertio_RuneReader(env *Env, obj Object, msg string) io.RuneReader {
	switch c := obj.(type) {
	case io.RuneReader:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "io.RuneReader", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func Ensureio_RuneReader(env *Env, args []Object, index int) io.RuneReader {
	switch c := args[index].(type) {
	case io.RuneReader:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "io.RuneReader"))
	}
}

func AssertChannel(env *Env, obj Object, msg string) *Channel {
	switch c := obj.(type) {
	case *Channel:
		return c
	default:
		if msg == "" {
			msg = fmt.Sprintf("Expected %s, got %s", "Channel", obj.GetType().ToString(false))
		}
		panic(env.RT.NewError(msg))
	}
}

func EnsureChannel(env *Env, args []Object, index int) *Channel {
	switch c := args[index].(type) {
	case *Channel:
		return c
	default:
		panic(env.RT.NewArgTypeError(index, c, "Channel"))
	}
}

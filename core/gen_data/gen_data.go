package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/lab47/lace/core"
	"github.com/lab47/lace/core/gen_common"
)

const template string = `// Generated by gen_data. Don't modify manually!

// +build !gen_data
{slowInit}
package core

import _ "embed"

//go:embed a_{name}_data.data
var {name}Data []byte

{lib-code}

`

const hextable = "0123456789abcdef"

func main() {
	namespaces := map[string]string{}

	coreCons := []string{}

	env := core.NewEnv()

	for _, f := range gen_common.CoreSourceFiles {
		env.SetCurrentNamespace(env.CoreNamespace)
		content, err := os.ReadFile("data/" + f.Filename)
		if err != nil {
			panic(err)
		}
		content, err = core.PackReader(env, core.NewReader(bytes.NewReader(content), f.Name), "")
		if err != nil {
			panic(err)
		}

		dataTemplate := template

		nsName := env.CurrentNamespace().Name.Name()

		libCode := ""
		setLazy := ""
		slowInit := ""
		if _, found := namespaces[nsName]; !found && nsName != "user" {
			libCode = `
func {name}Setup(env *Env) error {
	ns := env.EnsureNamespace(MakeSymbol("{ns}"))
	return processInEnvInNS(env, ns, {name}Data)
}

func init() {
	builtinNSSetup["{name}"] = {name}Setup
}

`[1:]
			setLazy = `
	{name}Namespace.Lazy = {name}LazyInit
`[1:]
			slowInit = `// +build !fast_init
`
		}
		dataTemplate = strings.ReplaceAll(dataTemplate, "{lib-code}", libCode)
		dataTemplate = strings.ReplaceAll(dataTemplate, "{set-lazy}", setLazy)

		name := f.Filename[:len(f.Filename)-len(filepath.Ext(f.Filename))]
		if _, found := namespaces[nsName]; !found {
			namespaces[nsName] = name

			if libCode != "" {
				coreCons = append(coreCons, name+"Construct,")
			}
		}
		fileContent := strings.ReplaceAll(dataTemplate, "{name}", name)
		fileContent = strings.ReplaceAll(fileContent, "{ns}", nsName)
		fileContent = strings.ReplaceAll(fileContent, "{slowInit}", slowInit)
		os.WriteFile("a_"+name+"_data.data", content, 0644)
		os.WriteFile("a_"+name+"_data.go", []byte(fileContent), 0666)
	}

	const dataTemplate = `// Generated by gen_data. Don't modify manually!

package core

func init() {
	coreNamespaces = []string{
{coreNamespaces}
	}
}
`

	coreNamespaces := []string{}
	for ns := range namespaces {
		coreNamespaces = append(coreNamespaces, fmt.Sprintf(`
		"%s",`[1:],
			ns))

	}
	dataContent := strings.Replace(dataTemplate, "{coreNamespaces}", strings.Join(coreNamespaces, "\n"), 1)
	os.WriteFile("a_data.go", []byte(dataContent), 0666)
}

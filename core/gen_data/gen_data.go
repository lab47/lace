package main

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"

	"github.com/lab47/lace/core"
	"github.com/lab47/lace/core/gen_common"
	_ "github.com/lab47/lace/gen-reflect"
	_ "github.com/lab47/lace/std-ng/string"
)

const template string = `// Generated by gen_data. Don't modify manually!

//go:build !gen_data
// +build !gen_data
package core

import "encoding/base64"
import _ "embed"

//go:embed a_{name}_data.data
var {name}Data []byte

{lib-code}

`

func main() {
	namespaces := map[string]string{}

	env, err := core.NewEnv()
	if err != nil {
		panic(err)
	}

	for _, f := range gen_common.CoreSourceFiles {
		env.SetCurrentNamespace(env.CoreNamespace)
		data, err := os.ReadFile("data/" + f.Filename)
		if err != nil {
			panic(err)
		}

		fmt.Println(f.Filename)

		content, err := core.ReadIntoBytecode(env, core.NewReader(bytes.NewReader(data), f.Name), "")
		if err != nil {
			core.DisplayError(env, err)
			os.Exit(1)
		}

		dataTemplate := template

		nsName := env.CurrentNamespace().Name.Name()

		libCode := ""
		setLazy := ""
		slowInit := ""
		if _, found := namespaces[nsName]; !found && nsName != "user" {
			libCode = `
func {name}Setup(env *Env) error {
	ns := env.EnsureNamespace(MakeSymbol("{ns}"))
	raw, err := base64.StdEncoding.AppendDecode(nil, {name}Data)
  if err != nil {
	  return err
	}
	return processInEnvInNS(env, ns, raw)
}

func init() {
	builtinNSSetup["{ns}"] = {name}Setup
}

`[1:]
			setLazy = `
	{name}Namespace.Lazy = {name}LazyInit
`[1:]
			slowInit = `// +build !fast_init
`
		}
		dataTemplate = strings.ReplaceAll(dataTemplate, "{lib-code}", libCode)
		dataTemplate = strings.ReplaceAll(dataTemplate, "{set-lazy}", setLazy)

		name := f.Filename[:len(f.Filename)-len(filepath.Ext(f.Filename))]
		if _, found := namespaces[nsName]; !found {
			namespaces[nsName] = name
		}
		fileContent := strings.ReplaceAll(dataTemplate, "{name}", name)
		fileContent = strings.ReplaceAll(fileContent, "{ns}", nsName)
		fileContent = strings.ReplaceAll(fileContent, "{slowInit}", slowInit)

		fmted, err := format.Source([]byte(fileContent))
		if err != nil {
			panic(err)
		}

		encoded := base64.StdEncoding.AppendEncode(nil, []byte(content))
		err = os.WriteFile("a_"+name+"_data.data", encoded, 0644)
		if err != nil {
			panic(err)
		}
		err = os.WriteFile("a_"+name+"_data.go", fmted, 0666)
		if err != nil {
			panic(err)
		}
	}

	const dataTemplate = `// Generated by gen_data. Don't modify manually!

package core

func init() {
	coreNamespaces = []string{
{coreNamespaces}
	}
}
`

	coreNamespaces := []string{}
	for ns := range namespaces {
		coreNamespaces = append(coreNamespaces, fmt.Sprintf(`
		"%s",`[1:],
			ns))

	}
	dataContent := strings.Replace(dataTemplate, "{coreNamespaces}", strings.Join(coreNamespaces, "\n"), 1)

	err = os.WriteFile("a_data.go", []byte(dataContent), 0666)
	if err != nil {
		panic(err)
	}
}

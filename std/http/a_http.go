// This file is generated by generate-std.clj script. Do not edit manually!

package http

import (
	. "github.com/lab47/lace/core"
)


var __send__P ProcFn = __send_
var send_ Proc = Proc{Fn: __send__P, Name: "send_", Package: "std/http"}

func __send_(_env *Env, _args []Object) (Object, error) {
	_c := len(_args)
	switch {
	case _c == 1:
		var err error
		request, err := ExtractMap(_env, _args, 0); if err != nil { return nil, err }
		_res, err := sendRequest(_env, request)
		return _res, err

	default:
		return nil, ErrorArity(_env, _c)
	}
}

var __start_file_server__P ProcFn = __start_file_server_
var start_file_server_ Proc = Proc{Fn: __start_file_server__P, Name: "start_file_server_", Package: "std/http"}

func __start_file_server_(_env *Env, _args []Object) (Object, error) {
	_c := len(_args)
	switch {
	case _c == 2:
		var err error
		addr, err := ExtractString(_env, _args, 0); if err != nil { return nil, err }
		root, err := ExtractString(_env, _args, 1); if err != nil { return nil, err }
		_res, err := startFileServer(addr, root)
		return _res, err

	default:
		return nil, ErrorArity(_env, _c)
	}
}

var __start_server__P ProcFn = __start_server_
var start_server_ Proc = Proc{Fn: __start_server__P, Name: "start_server_", Package: "std/http"}

func __start_server_(_env *Env, _args []Object) (Object, error) {
	_c := len(_args)
	switch {
	case _c == 2:
		var err error
		addr, err := ExtractString(_env, _args, 0); if err != nil { return nil, err }
		handler, err := ExtractCallable(_env, _args, 1); if err != nil { return nil, err }
		_res, err := startServer(_env, addr, handler)
		return _res, err

	default:
		return nil, ErrorArity(_env, _c)
	}
}

func Init(env *Env, ns *Namespace) {

	InternsOrThunks(env, ns)
}

func init() {
	AddNativeNamespace("lace.http", func(env *Env) error {
		ns := env.EnsureNamespace(MakeSymbol("lace.http"))
		Init(env, ns)
		return nil
	})
}

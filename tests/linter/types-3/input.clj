(inc (list 1))
(inc (cons 1 []))
(inc (next []))
(inc (rest []))
(inc (conj [] 1))
(inc (nfirst []))
(inc (nnext []))
(inc (seq []))
(inc (instance? Seq []))
(inc (seq? []))
(inc (char? []))
(inc (map? []))
(inc (vector? []))
(inc (ex-info "" {}))
(inc (assoc [] 0 1))
(inc (meta []))
(inc (butlast []))
(inc (vec []))
(inc (vector 1))
(inc (hash-set 1))
(inc (nil? 1))
(inc (false? 1))
(inc (true? 1))
(inc (boolean? 1))
(inc (any? 1))
(inc (not 1))
(inc (some? 1))
(inc (str))
(inc (symbol? 1))
(inc (keyword? 1))
(inc (symbol 1))
(inc (gensym))
(inc (print "test"))
(inc (prn "test"))
(inc (println "test"))
(inc (keyword "t"))
(inc (list* 1 []))
(inc (chunked-seq? 1))
(inc (concat []))
(inc (delay? 1))
(inc (identical? 1 2))
(inc (= 1 2))
(inc (not= 1 2))
(map (compare 1 2))
(inc (zero? 1))
(map (count []))
(map (int 1))
(inc (< 1 2))
(map (inc' 1))
(map (inc 1))
(inc (reverse []))
(map (+' 1))
(map (+ 1))
(map (*' 1))
(map (* 1))
(map (/ 1))
(map (-' 1))
(map (- 1))
(inc (<= 1 2))
(inc (> 1 2))
(inc (>= 1 2))
(inc (== 1 2))
(map (max 1 2))
(map (min 1 2))
(map (dec' 1))
(map (dec 1))
(inc (pos? 1))
(inc (neg? 1))
(map (quot 1 2))
(map (rem 1 2))
(map (bit-not 1))
(map (bit-and 1 2))
(map (bit-or 1 2))
(map (bit-xor 1 2))
(map (bit-and-not 1 2))
(map (bit-clear 1 2))
(map (bit-set 1 2))
(map (bit-flip 1 2))
(map (bit-test 1 2))
(map (bit-shift-left 1 2))
(map (bit-shift-right 1 2))
(map (unsigned-bit-shift-right 1 2))
(map (integer? 1))
(map (even? 1))
(map (odd? 1))
(map (int? 1))
(map (pos-int? 1))
(map (neg-int? 1))
(map (nat-int? 1))
(map (double? 1))
(inc (complement identity))
(inc (constantly identity))
(inc (contains? [] 1))
(inc (dissoc {} :r))
(inc (disj #{} :r))
(inc (select-keys {} [:r]))
(inc (keys {}))
(inc (vals {}))
(inc (rseq []))
(inc (name :d))
(inc (namespace :d))
(inc (ident? :d))
(inc (simple-ident? :d))
(inc (qualified-ident? :d))
(inc (simple-symbol? :d))
(inc (simple-keyword? :d))
(inc (qualified-keyword? :d))
(inc (class :d))
(inc (type :d))
(inc (atom :d))
(inc (swap-vals! (atom 1) +))
(inc (reset-vals! (atom 1) +))
(inc (find-var 't))
(inc (comp + -))
(inc (juxt + -))
(inc (partial - 1))
(inc (sequence [] []))
(inc (every? + []))
(inc (not-every? + []))
(inc (not-any? + []))
(inc (map inc nil))
(inc (mapcat inc nil))
(inc (filter inc nil))
(inc (remove inc nil))
(inc (take 1 []))
(inc (take-while + []))
(inc (drop 1 []))
(inc (drop-last 1 []))
(inc (take-last 1 []))
(inc (drop-while + []))
(inc (cycle []))
(inc (split-at 1 []))
(inc (split-with + []))
(inc (repeat 1))
(inc (iterate + 1))
(inc (range 1))
(inc (merge 1))
(inc (merge-with + 1))
(inc (zipmap [] []))
(inc (sort []))
(inc (sort-by + []))
(inc (dorun []))
(inc (doall []))
(inc (nthnext [] 2))
(inc (nthrest [] 2))
(inc (partition 1 []))
(map (num 1) [])
(map (double 1) [])
(map (char 1) [])
(map (boolean 1) [])
(map (number? 1) [])
(map (mod 1 2) [])
(map (ratio? 1) [])
(map (numerator 1/2 ) [])
(map (denominator 1/2 ) [])
(inc (float? 1))
(inc (rational? 1))
(map (bigint 1) [])
(inc (pr 1))
(inc (newline))
(inc (flush))
(inc (read-line))
(inc (subvec [] 1))
(inc (set? 1))
(inc (set 1))
(inc (find-ns 'f))
(inc (create-ns 'f))
(inc (remove-ns 'f))
(inc (all-ns))
(inc (the-ns 'f))
(inc (ns-name 'f))
(inc (ns-map 'f))
(inc (ns-unmap 'f 'g))
(inc (ns-publics 'f))
(inc (ns-interns 'f ))
(inc (intern 'f 'f))
(inc (refer 'f))
(inc (ns-refers 'f))
(inc (alias 'f 'g))
(inc (ns-aliases 'f))
(inc (ns-unalias 'f 'g))
(inc (take-nth 2 []))
(inc (interleave [] []))
(inc (ns-resolve 'f 'v))
(inc (resolve 'f))
(inc (array-map 1 2))
(inc (lazy-cat))
(inc (pr-str))
(inc (prn-str))
(inc (print-str))
(inc (println-str))
(inc (ex-data 1))
(inc (ex-cause 1))
(inc (ex-message 1))
(map (hash 1) [])
(inc (test 1))
(inc (re-pattern ""))
(inc (re-seq #"" ""))
(map (rand 10) [])
(map (rand-int 10) [])
(inc (tree-seq + + 1))
(inc (xml-seq 1))
(inc (special-symbol? 1))
(inc (var? 1))
(inc (subs "" 1))
(inc (distinct []))
(inc (repeatedly +))
(inc (interpose 1 []))
(inc (empty []))
(inc (bound?))
(inc (not-empty []))
(inc (distinct? 1))
(inc (format ""))
(inc (printf ""))
(inc (in-ns 'lace.core))
(inc (require 'g))
(inc (requiring-resolve 'f))
(inc (use 'g))
(inc (loaded-libs))
(inc (assoc-in {} [] 1))
(inc (update-in {} [] +))
(inc (update {} :f +))
(inc (coll? []))
(inc (list? []))
(inc (seqable? []))
(inc (callable? []))
(inc (associative? []))
(inc (sequential? []))
(inc (counted? []))
(inc (reversible? []))
(inc (indexed? []))
(inc (memoize +))
(inc (empty? []))
(inc (fnil + 1))
(inc (partition-all 1 []))
(inc (mapv + []))
(inc (filterv + []))
(inc (slurp ""))
(inc (spit "" ""))
(inc (flatten []))
(inc (group-by + []))
(inc (partition-by + []))
(inc (frequencies []))
(inc (reductions + []))
(inc (shuffle []))
(inc (map-indexed + []))
(inc (keep + []))
(inc (keep-indexed + []))
(map (bounded-count 2 []) [])
(inc (every-pred []))
(inc (some-fn []))
(inc (realized? (delay 1)))
(inc (dedupe []))
(inc (random-sample 1 []))
(inc (run! + []))
(inc (methods 1))
(inc (get-method 1 1))
(inc (prefers 1))
